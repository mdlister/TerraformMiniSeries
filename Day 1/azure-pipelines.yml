# azure-pipelines.yml
trigger:
  branches:
    include: [ main ]
  paths:
    include: [ codebase/**, azure-pipelines.yml ]

pool:
  vmImage: ubuntu-latest

variables:
- name: envName
  value: dev

- group: tf-dev

stages:
- stage: Validate
  jobs:
  - job: validate
    steps:
    - task: TerraformInstaller@1
      displayName: Install Terraform (latest)
      inputs:
        terraformVersion: latest

    # Keep validation backend-less
    - script: |
        terraform -chdir=codebase/env/$(envName) init -backend=false
        terraform -chdir=codebase/env/$(envName) fmt -check -recursive
        terraform -chdir=codebase/env/$(envName) validate
      displayName: terraform fmt & validate

- stage: PlanApply
  jobs:
  - job: plan_apply
    steps:
    - task: TerraformInstaller@1
      displayName: Install Terraform (latest)
      inputs:
        terraformVersion: latest

    # INIT with AzureRM backend + OIDC
    - task: TerraformTask@5
      displayName: terraform init (azurerm backend + OIDC)
      inputs:
        command: init
        provider: 'azurerm'
        workingDirectory: codebase/env/$(envName)
        backendType: azurerm
        backendAzureRmUseEntraIdForAuthentication: false
        backendAzureRmUseCliFlagsForAuthentication: true
        backendServiceArm: 'sc-ado-terraform-wif'
        backendAzureRmResourceGroupName: $(tfstateRg)
        backendAzureRmStorageAccountName: $(tfstateSa)
        backendAzureRmContainerName: $(tfstateContainer)
        backendAzureRmKey: $(tfstateKey)

    # PLAN with OIDC
    - task: TerraformTask@5
      displayName: terraform plan
      inputs:
        command: plan
        workingDirectory: codebase/env/$(envName)
        environmentServiceNameAzureRM: 'sc-ado-terraform-wif'

    # APPLY with OIDC  
    - task: TerraformTask@5
      displayName: terraform apply
      inputs:
        command: apply
        commandOptions: >
          -auto-approve
        environmentServiceNameAzureRM: 'sc-ado-terraform-wif'
        workingDirectory: codebase/env/$(envName)

